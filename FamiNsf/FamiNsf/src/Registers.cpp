#include "Registers.h"
#include <memory>

Registers s_nes_regs;
uint8_t s_nes_execution_finished;

#if 0
const uint8_t s_register_z[256] = 
{
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
#endif

/*
void Registers::SetZN( uint8_t src )
{
    P = (P & ( ~(Z|N) )) | s_register_sz[src];
}

void Registers::SetZero( uint8_t v )
{
    SetZ( v == 0 );
}

void Registers::SetSign( uint8_t v )
{
    SetN( (v & 0x80) != 0 );
}

void Registers::SetCarry( uint16_t v )
{
    SetC( (v & 0x100) != 0 );
}

void Registers::SetOverflow( uint16_t v )
{
    SetV( v > 0xFF );
}

void Registers::SetC( bool c )
{
    if ( c )
        P |= C;
    else
        P &= ~C;
}

void Registers::SetZ( bool z )
{
    if ( z )
        P |= Z;
    else
        P &= ~Z;
}

void Registers::SetI( bool i )
{
    if ( i )
        P |= I;
    else
        P &= ~I;
}

void Registers::SetD( bool d )
{
    if ( d )
        P |= D;
    else
        P &= ~D;
}

void Registers::SetB( bool b )
{
    if ( b )
        P |= B;
    else
        P &= ~B;
}

void Registers::SetU( bool u )
{
    if ( u )
        P |= U;
    else
        P &= ~U;
}

void Registers::SetV( bool v )
{
    if ( v )
        P |= V;
    else
        P &= ~V;
}

void Registers::SetN( bool n )
{
    if ( n )
        P |= N;
    else
        P &= ~N;
}

bool Registers::GetC() const
{
    return ( (uint8_t)(P & C) != 0 );
}

bool Registers::GetZ() const
{
    return ( (uint8_t)(P & Z) != 0 );
}

bool Registers::GetD() const
{
    return ( (uint8_t)(P & D) != 0 );
}

bool Registers::GetV() const
{
    return ( (uint8_t)(P & V) != 0 );
}

bool Registers::GetN() const
{
    return ( (uint8_t)(P & N) != 0 );
}
*/